<?xml version = "1.0" encoding = "UTF-8"?>
<!DOCTYPE mapper PUBLIC
        "-//mybatis.org//DTD com.example.Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.mapper.StudentMapper">
    <resultMap id="result" type="com.example.demo.domain.StudentDomain">
        <result property="stuid" column="stuid"/>
        <result property="stuname" column="stuname"/>
        <result property="stusex" column="stusex"/>
        <result property="stubirth" column="stubirthr"/>

    </resultMap>

    <select id="ListStudnt" resultMap="result">
		SELECT * FROM studenttable
	</select>

    <select id="findStudntByName" resultMap="result">
		SELECT * FROM studenttable where stuname=#{stuname}
	</select>

    <insert id="insertStudent" parameterType="com.example.demo.domain.StudentDomain"
            keyProperty="stuid" useGeneratedKeys="true">
		INSERT INTO studenttable
		(
		stuid,stuname,stusex,stubirth,classDomain
		)
		VALUES (
		#{stuid, jdbcType=INTEGER},
		#{stuname, jdbcType=VARCHAR},
		#{stusex, jdbcType=CHAR},
		#{stubirth, jdbcType=VARCHAR}
		)
	</insert>

    <delete id="delete" parameterType="int">
		delete from studenttable where stuid=#{stuid}
	</delete>
  <!--在mybatis的配置文件中，有个叫keyProperty和useGeneratedKeys的属性。useGeneratedKeys 参数只针对 insert 语句生效，默认为 false。当设置为 true 时，表示如果插入的表以自增列为主键，则允许 JDBC 支持自动生成主键，并可将自动生成的主键返回。
                            具体用法： useGeneratedKeys=”true” keyProperty=”对应的主键的对象”。-->
    <!--批量插入-->
    <sql id="userInfoColumnsList">
        <trim suffixOverrides=",">
            <if test="item.stuid != null">stuid,</if>
            <if test="item.stusex != null">stusex,</if>
            <if test="item.stuname != null">stuname,</if>
            <if test="item.stubirth != null">stubirth,</if>
        </trim>
    </sql>
    <sql id="userInfoValuesList">
        <trim suffixOverrides=",">
            <if test="item.stuid != null">#{item.stuid},</if>
            <if test="item.stusex != null">#{item.age},</if>
            <if test="item.stuname != null">#{item.stuname},</if>
            <if test="item.stubirth != null">#{item.stubirth},</if>
        </trim>
    </sql>
    <!--测试动态批量插入成功,注意application.yml数据库设置要加上&allowMultiQueries=true,否者提示SQLSyntaxErrorException-->
    <insert id="batchInsert" parameterType="com.example.demo.domain.StudentDomain" keyColumn="stuid" keyProperty="stuid" useGeneratedKeys="true">

        <foreach item="item" index="index" collection="list" separator=";">
            insert into UserInfo(<include refid="userInfoColumnsList"/>)
            VALUES(<include refid="userInfoValuesList"/>)
        </foreach>

    </insert>
    <!--批量更新-->
    <!--动态批量更新，<set></set>相当于SET-->
    <update id="batchUpdate" parameterType="com.example.demo.domain.StudentDomain">
        <foreach collection="list" item="item" index="index" open="" close="" separator=";">
            update UserInfo
            <set>
                <if test="item.stusex != null">stusex=#{item.stusex},</if>
                <if test="item.stuname != null">stuname=#{item.stuname},</if>
                <if test="item.stubirth != null">stubirth=#{item.stubirth},</if>
            </set>
            where stuid = #{item.stuid}
        </foreach>
    </update>
    <!--条件查询<if>标签-->
    <select id="findByUser" resultType="com.example.demo.domain.StudentDomain" parameterType="studentDomain">
        select * from user where 1=1
        <if test="stuname!=null and stuname != '' ">and stuname like #{stuname}
        </if>
        <if test="stusex != null">and stusex like #{stusex}
        </if>
    </select>
    <!--条件查询<where>标签，与上面去掉where 1=1功能相同-->
    <select id="findByUserB" resultType="studentDomain" parameterType="studentDomain">
        select * from user
        <where>
            <if test="stuname!=null and stuname != '' ">and stuname like #{stuname}
            </if>
            <if test="stusex != null">and stusex like #{stusex}
            </if>
        </where>
    </select>


    <!-- 抽取重复的语句代码片段 -->
    <sql id="defaultSql">   select * from user  </sql>
    <!--  select * from user where id in (1,2,3,4,5); 的xml表示方法-->
    <select id="findInIds" resultType="studentDomain" parameterType="listInput">
        <include refid="defaultSql"></include>
        <where>
            <if test="stuid != null and stuid.size() > 0">
                <foreach collection="listInput" open="id in ( " close=")" item="stuuid" separator=",">#{uid}
                </foreach>
            </if>
        </where>
    </select>
    <!-- 定义封装account和user的resultMap -->
    <resultMap id="accountUserMap" type="StudentDomain">
        <id property="stuid" column="stuid"></id>
        <result property="stuname" column="stuname"></result>
        <result property="stusex" column="stusex"></result>
        <result property="stubirth" column="stubirth"></result>
        <!-- 一对一的关系映射：配置封装user的内容-->
        <association property="user" column="stuid" javaType="ClassDoamin">
            <id property="stuid" column="stuid"></id>
            <result column="stusubject" property="stusubject"></result>
        </association>
    </resultMap>
    <!--一对一-->
    <select id="findAllAccountByid" resultType="accountUserMap">
    select s.*,c.stu.subject from studenDomain s ,classdomain c where s.stuid=c.stuid;
</select>


</mapper>